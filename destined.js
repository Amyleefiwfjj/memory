let currentLoveText = '';
const stroke = {
    '„Ñ±': 2, '„Ñ¥': 2, '„Ñ∑': 3, '„Ñπ': 5, '„ÖÅ': 4, '„ÖÇ': 4, '„ÖÖ': 2, '„Öá': 1, '„Öà': 3, '„Öä': 4, '„Öã': 3, '„Öå': 4, '„Öç': 4, '„Öé': 3,
    '„Öè': 2, '„Öê': 3, '„Öë': 3, '„Öí': 4, '„Öì': 2, '„Öî': 3, '„Öï': 3, '„Öñ': 4, '„Öó': 2, '„Öõ': 3, '„Öú': 2, '„Ö†': 3, '„Ö°': 1, '„Ö£': 1
};
const splitCon = {
    '„Ñ≤': ['„Ñ±', '„Ñ±'], '„Ñ≥': ['„Ñ±', '„ÖÖ'], '„Ñµ': ['„Ñ¥', '„Öà'], '„Ñ∂': ['„Ñ¥', '„Öé'],
    '„Ñ∫': ['„Ñπ', '„Ñ±'], '„Ñª': ['„Ñπ', '„ÖÅ'], '„Ñº': ['„Ñπ', '„ÖÇ'], '„ÑΩ': ['„Ñπ', '„ÖÖ'],
    '„Ñæ': ['„Ñπ', '„Öå'], '„Ñø': ['„Ñπ', '„Öç'], '„ÖÄ': ['„Ñπ', '„Öé'], '„ÖÑ': ['„ÖÇ', '„ÖÖ'],
    '„Ñ∏': ['„Ñ∑', '„Ñ∑'], '„ÖÉ': ['„ÖÇ', '„ÖÇ'], '„ÖÜ': ['„ÖÖ', '„ÖÖ'], '„Öâ': ['„Öà', '„Öà']
};
const splitVow = {
    '„Öò': ['„Öó', '„Öè'], '„Öô': ['„Öó', '„Öê'], '„Öö': ['„Öó', '„Ö£'],
    '„Öù': ['„Öú', '„Öì'], '„Öû': ['„Öú', '„Öî'], '„Öü': ['„Öú', '„Ö£'], '„Ö¢': ['„Ö°', '„Ö£']
};
const CHO = ['„Ñ±', '„Ñ≤', '„Ñ¥', '„Ñ∑', '„Ñ∏', '„Ñπ', '„ÖÅ', '„ÖÇ', '„ÖÉ', '„ÖÖ', '„ÖÜ', '„Öá', '„Öà', '„Öâ', '„Öä', '„Öã', '„Öå', '„Öç', '„Öé'];
const JUNG = ['„Öè', '„Öê', '„Öë', '„Öí', '„Öì', '„Öî', '„Öï', '„Öñ', '„Öó', '„Öò', '„Öô', '„Öö', '„Öõ', '„Öú', '„Ö†', '„Öù', '„Öû', '„Öü', '„Ö†', '„Ö°', '„Ö¢', '„Ö£'];
const JONG = ['', '„Ñ±', '„Ñ≤', '„Ñ≥', '„Ñ¥', '„Ñµ', '„Ñ∂', '„Ñ∑', '„Ñπ', '„Ñ∫', '„Ñª', '„Ñº', '„ÑΩ', '„Ñæ', '„Ñø', '„ÖÄ', '„ÖÅ', '„ÖÇ', '„ÖÑ', '„ÖÖ', '„ÖÜ', '„Öá', '„Öà', '„Öä', '„Öã', '„Öå', '„Öç', '„Öé'];

// ÌïúÍ∏Ä ÏùåÏ†à Î∂ÑÌï¥
function decomposeHangul(str) {
    return Array.from(str).map(ch => {
        const code = ch.charCodeAt(0) - 0xAC00;
        if (code < 0 || code > 11171) return [ch];
        const jong = code % 28;
        const jung = Math.floor((code / 28) % 21);
        const cho = Math.floor(code / (28 * 21));
        const parts = [CHO[cho], JUNG[jung]];
        if (JONG[jong]) parts.push(JONG[jong]);
        return parts;
    });
}
document.getElementById('runBtn').addEventListener('click', () => {
    const A = document.getElementById('nameA').value.trim();
    const B = document.getElementById('nameB').value.trim();
    if (!A || !B) return;

    const { chars, steps } = calcSteps(A, B);
    vizChars = chars;
    vizSteps = steps;

    const last = steps[steps.length - 1];
    const percent = last.join('');
    currentLoveText = `${A} loves ${B} ${percent}%`;

    document.getElementById('score').textContent = ''; // UI ÏòÅÏó≠ÏùÄ ÎπÑÏõåÎë†

    redraw();
});
// ÏùåÏ†àÎ≥Ñ ÌöçÏàò Ìï©ÏÇ∞
function countStrokes(str) {
    return decomposeHangul(str).map(parts =>
        parts
            .flatMap(j => splitCon[j] || splitVow[j] || [j])
            .reduce((s, jamo) => s + (stroke[jamo] || 0), 0)
    );
}

// ÍµêÏ∞® ÏÇΩÏûÖ
function interleave(a, b) {
    const out = [], n = Math.max(a.length, b.length);
    for (let i = 0; i < n; i++) {
        if (i < a.length) out.push(a[i]);
        if (i < b.length) out.push(b[i]);
    }
    return out;
}

// ‚îÄ‚îÄ ÏàòÏ†ïÎêú combine: Ïä¨ÎùºÏù¥Îî©(pairwise adjacent) Î∞©Ïãù ‚îÄ‚îÄ
function combine(scores) {
    const next = [];
    for (let i = 0; i < scores.length - 1; i++) {
        next.push((scores[i] + scores[i + 1]) % 10);
    }
    return next;
}

// Î™®Îì† Îã®Í≥Ñ ÏàòÏßë
function calcSteps(n1, n2) {
    const chars = interleave(n1, n2);
    const steps = [];
    let cur = countStrokes(chars.join(''));
    steps.push(cur);
    while (cur.length > 1) {
        cur = combine(cur);
        steps.push(cur);
    }
    return steps;
}

// p5.js viz
let vizSteps = [];
function setup() {
    createCanvas(windowWidth, windowHeight);
    noLoop(); textAlign(CENTER, CENTER); textSize(24);
}

function draw() {
    clear();
    if (!vizSteps.length) return;

    const Mx = 150, ColW = 120, Vs = 80;

    // üíú Î¨∏Íµ¨ ÌëúÏãú: ÎèÑÌëú ÏôºÏ™Ω Î¨∏ÏûêÏôÄ Ïò§Î•∏Ï™Ω Ïà´Ïûê ÏÇ¨Ïù¥
    textAlign(LEFT, CENTER);
    textSize(22);
    fill(100, 80, 160);
    text(currentLoveText, Mx - ColW + 90, height / 2);

    // Ïà´Ïûê ÏãúÍ∞ÅÌôî ÎèÑÌëú
    textAlign(CENTER, CENTER);
    textSize(24);
    vizSteps.forEach((arr, i) => {
        const x = Mx + i * ColW;
        const H = (arr.length - 1) * Vs;
        noStroke(); fill(33);
        arr.forEach((v, j) => {
            text(v, x, height / 2 - H / 2 + j * Vs);
        });

        if (i < vizSteps.length - 1) {
            stroke(120);
            const nxt = vizSteps[i + 1];
            const H2 = (nxt.length - 1) * Vs;
            nxt.forEach((_, k) => {
                const x2 = Mx + (i + 1) * ColW;
                const y2 = height / 2 - H2 / 2 + k * Vs;
                const y1a = height / 2 - H / 2 + k * Vs;
                const y1b = y1a + Vs;
                line(x, y1a, x2, y2);
                line(x, y1b, x2, y2);
            });
        }
    });

    // ÏôºÏ™Ω Î¨∏Ïûê ÏãúÍ∞ÅÌôî
    const charX = Mx - ColW + 20;
    const totalC = (vizChars.length - 1) * Vs;
    noStroke(); fill(33);
    vizChars.forEach((ch, i) => {
        text(ch, charX, height / 2 - totalC / 2 + i * Vs);
    });
}

// Î≤ÑÌäº Ï≤òÎ¶¨
document.getElementById('runBtn').addEventListener('click', () => {
    const A = document.getElementById('nameA').value.trim();
    const B = document.getElementById('nameB').value.trim();
    if (!A || !B) return;
    vizSteps = calcSteps(A, B);
    // ÌôîÎ©¥Ïóê Î™®Îì† Í≥ºÏ†ïÏùÑ ÌôîÏÇ¥ÌëúÎ°ú Ïù¥Ïñ¥ÏßÑ Î¨∏ÏûêÏó¥Î°ú ÌëúÏãú
    const txt = vizSteps.map((arr, i) => {
        // ÎßàÏßÄÎßâ Î∞∞Ïó¥Ïù¥ Í∏∏Ïù¥ 1 ÎòêÎäî 2Ïù¥Î©¥, join('')ÏúºÎ°ú Î∂ôÏó¨Ï£ºÍ≥†
        return (i === vizSteps.length - 1 && arr.length > 1)
            ? arr.join('')
            : arr.join(',');
    }).join(' ‚Üí ');
    document.getElementById('score').textContent = txt;
    // Ï∫îÎ≤ÑÏä§ Ïû¨Ï°∞Ï†ï & Í∑∏Î¶¨Í∏∞
    const neededH = 100 + vizSteps.length * RH;
    resizeCanvas(windowWidth, neededH);
    redraw();
});

function homePage() {
    window.location.href = "index.html";
}